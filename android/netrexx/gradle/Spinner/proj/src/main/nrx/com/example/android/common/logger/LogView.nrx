package com.example.android.common.logger

import android.app.Activity
import android.content.Context
import android.util.
import android.widget.TextView

/** Simple TextView which is used to output log data received through the LogNode interface.
 */
class LogView public extends TextView implements LogNode

  properties private
  mNext = LogNode

  properties constant
  outputBuilder = StringBuilder()


  method LogView( context=Context ) returns LogView
    super(context)
    return this

  method LogView( context=Context,  attrs=AttributeSet)
    super(context, attrs)

  method LogView( context=Context,  attrs=AttributeSet,  defStyle=int)
    super(context, attrs, defStyle)

  /**
   * Formats the log data and prints it out to the LogView.
   * @param priority Log level of the data being logged.  Verbose, Error, etc.
   * @param tag Tag for for the log data.  Can be used to organize log statements.
   * @param msg The actual message to be logged. The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
    /* **nonrx**  @Override ** */
  method println( priority=int,  tag=String,  msg=String,  tr=Throwable )
    priorityStr = String
    priorityStr = null

    select
      when priority = android.util.Log.VERBOSE then
        do
          priorityStr = "VERBOSE"
        end
      when priority = android.util.Log.DEBUG then
        do
          priorityStr = "DEBUG"
        end
      when priority = android.util.Log.INFO then
        do
          priorityStr = "INFO"
        end
      when priority = android.util.Log.WARN then
        do
          priorityStr = "WARN"
        end
      when priority = android.util.Log.ERROR then
        do
          priorityStr = "ERROR"
        end
      when priority = android.util.Log.ASSERT then
        do
          priorityStr = "ASSERT"
        end
      otherwise
    end

    exceptionStr = String
    exceptionStr = null
    if tr \== null then do
      exceptionStr = android.util.Log.getStackTraceString(tr)

    end

    -- outputBuilder = StringBuilder()
    delimiter = String
    delimiter = "\t"
    appendIfNotNull(outputBuilder, priorityStr, delimiter)
    appendIfNotNull(outputBuilder, tag, delimiter)
    appendIfNotNull(outputBuilder, msg, delimiter)
    appendIfNotNull(outputBuilder, exceptionStr, delimiter)
    -- ((Activity) getContext()).runOnUiThread((Thread( LogView.myRunnable() )))
    mActivity = Activity getContext()
    mActivity.runOnUiThread((Thread( LogView.myRunnable() )))
    if mNext \== null then do
      mNext.println(priority, tag, msg, tr)
    end

  method getNext  returns LogNode
    return mNext

  method setNext( node=LogNode )
    mNext = node

  /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since
   * the logger takes so many arguments that might be null, this method helps cut out some of the
   * agonizing tedium of writing the same 3 lines over and over.
   * @param source StringBuilder containing the text to append to.
   * @param addStr The String to append
   * @param delimiter The String to separate the source and appended strings. A tab or comma,
   *                  for instance.
   * @return The fully concatenated String as a StringBuilder
   */
  method appendIfNotNull( source=StringBuilder,  addStr=String,  delimiter=String ) private  returns StringBuilder
    if addStr \== null then do
      if addStr.length() == 0 then do
        delimiter = ""

      end

    return source.append(addStr).append(delimiter)

    end

    return source


  /** Outputs the string as a new line of log data in the LogView. */
  method appendToLog( s=String )
    append("\n" || s)


class LogView.myRunnable dependent implements Runnable
  /* **nonrx**  @Override ** */
  method run
    parent.appendToLog(parent.outputBuilder.toString())
