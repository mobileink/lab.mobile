/*
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.common.logger

/**
 * Helper class for a list (or tree) of LoggerNodes.
 *
 * <p>When this is set as the head of the list,
 * an instance of it can function as a drop-in replacement for {@link android.util.Log}.
 * Most of the methods in this class server only to map a method call in Log to its equivalent
 * in LogNode.</p>
 */
class Log public

  properties public constant
  NONE = int -1
  VERBOSE = int android.util.Log.VERBOSE
  DEBUG = int android.util.Log.DEBUG
  INFO = int android.util.Log.INFO
  WARN = int android.util.Log.WARN
  ERROR = int android.util.Log.ERROR
  ASSERT = int android.util.Log.ASSERT

  properties private static
  mLogNode = LogNode

  -- Returns the next LogNode in the linked list.
  method getLogNode static  returns LogNode
    return mLogNode

  -- Sets the LogNode data will be sent to.
  method setLogNode( node=LogNode ) static
    mLogNode = node


  /**
   * Instructs the LogNode to print the log data provided. Other LogNodes can
   * be chained to the end of the LogNode as desired.
   *
   * @param priority Log level of the data being logged. Verbose, Error, etc.
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method println( priority=int,  tag=String,  msg=String,  tr=Throwable ) static
    if mLogNode \== null then do
      mLogNode.println(priority, tag, msg, tr)
    end

  /**
   * Instructs the LogNode to print the log data provided. Other LogNodes can
   * be chained to the end of the LogNode as desired.
   *
   * @param priority Log level of the data being logged. Verbose, Error, etc.
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged. The actual message to be logged.
   */
  method println( priority=int,  tag=String,  msg=String ) static
    println(priority, tag, msg, null)

  /**
   * Prints a message at VERBOSE priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method v( tag=String,  msg=String,  tr=Throwable ) static
    println(VERBOSE, tag, msg, tr)


  /**
   * Prints a message at VERBOSE priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   */
  method v( tag=String,  msg=String ) static
    v(tag, msg, null)


  /**
   * Prints a message at DEBUG priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method d( tag=String,  msg=String,  tr=Throwable ) static
    println(DEBUG, tag, msg, tr)


  /**
   * Prints a message at DEBUG priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   */
  method d( tag=String,  msg=String ) static
    d(tag, msg, null)


  /**
   * Prints a message at INFO priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method i( tag=String,  msg=String,  tr=Throwable ) static
    println(INFO, tag, msg, tr)


  /**
   * Prints a message at INFO priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   */
  method i( tag=String,  msg=String ) static
    i(tag, msg, null)


  /**
   * Prints a message at WARN priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method w( tag=String,  msg=String,  tr=Throwable ) static
    println(WARN, tag, msg, tr)


  /**
   * Prints a message at WARN priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   */
  method w( tag=String,  msg=String ) static
    w(tag, msg, null)


  /**
   * Prints a message at WARN priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method w( tag=String,  tr=Throwable ) static
    w(tag, null, tr)


  /**
   * Prints a message at ERROR priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method e( tag=String,  msg=String,  tr=Throwable ) static
    println(ERROR, tag, msg, tr)


  /**
   * Prints a message at ERROR priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   */
  method e( tag=String,  msg=String ) static
    e(tag, msg, null)


  /**
   * Prints a message at ASSERT priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method wtf( tag=String,  msg=String,  tr=Throwable ) static
    println(ASSERT, tag, msg, tr)


  /**
   * Prints a message at ASSERT priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param msg The actual message to be logged.
   */
  method wtf( tag=String,  msg=String ) static
    wtf(tag, msg, null)


  /**
   * Prints a message at ASSERT priority.
   *
   * @param tag Tag for for the log data. Can be used to organize log statements.
   * @param tr If an exception was thrown, this can be sent along for the logging facilities
   *           to extract and print useful information.
   */
  method wtf( tag=String,  tr=Throwable ) static
    wtf(tag, null, tr)
