package com.example.android.navigationdrawer

import java.util.Locale

import android.app.Activity
import android.app.Fragment
import android.app.FragmentManager
import android.app.SearchManager
import android.content.Intent
import android.content.res.Configuration
import android.os.Bundle
import android.support.v4.app.ActionBarDrawerToggle
import android.support.v4.view.GravityCompat
import android.support.v4.widget.DrawerLayout
import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuInflater
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.AdapterView.OnItemClickListener
import android.widget.ArrayAdapter
import android.widget.ImageView
import android.widget.ListAdapter
import android.widget.ListView
import android.widget.Toast

/**
 * This example illustrates a common usage of the DrawerLayout widget
 * in the Android support library.
 * <p/>
 * <p>When a navigation (start-side) drawer is present, the host activity should detect presses of
 * the action bar's Up affordance as a signal to open and close the navigation drawer. The
 * ActionBarDrawerToggle facilitates this behavior.
 * Items within the drawer should fall into one of two categories:</p>
 * <p/>
 * <ul>
 * <li><strong>View switches</strong>. A view switch follows the same basic policies as
 * list or tab navigation in that a view switch does not create navigation history.
 * This pattern should only be used at the root activity of a task, leaving some form
 * of Up navigation active for activities further down the navigation hierarchy.</li>
 * <li><strong>Selective Up</strong>. The drawer allows the user to choose an alternate
 * parent for Up navigation. This allows a user to jump across an app's navigation
 * hierarchy at will. The application should treat this as it treats Up navigation from
 * a different task, replacing the current task stack using TaskStackBuilder or similar.
 * This is the only form of navigation drawer that should be used outside of the root
 * activity of a task.</li>
 * </ul>
 * <p/>
 * <p>Right side drawers should be used for actions, not navigation. This follows the pattern
 * established by the Action Bar that navigation should be to the left and actions to the right.
 * An action should be an operation performed on the current contents of the window,
 * for example enabling or disabling a data overlay on top of the current content.</p>
 */
class MainActivity public  extends Activity

  properties inheritable
  mDrawerLayout = DrawerLayout
  mDrawerList = ListView
  mDrawerToggle = ActionBarDrawerToggle
  mDrawerTitle = CharSequence
  mTitle = CharSequence
  mPlanetTitles = String[]

  properties inheritable constant
  ARG_PLANET_NUMBER = String "planet_number"


  /* **nonrx**  @Override ** */
  method onCreate( savedInstanceState=Bundle ) inheritable
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)
    mDrawerTitle = CharSequence getTitle()
    mTitle = mDrawerTitle
    mPlanetTitles = getResources().getStringArray(R.array.planets_array)
    mDrawerLayout = DrawerLayout findViewById(R.id.drawer_layout)
    mDrawerList = ListView findViewById(R.id.start_drawer)
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START)
    mDrawerList.setAdapter(ListAdapter ArrayAdapter(this, R.layout.drawer_list_item, mPlanetTitles))
    mDrawerList.setOnItemClickListener(DrawerItemClickListener())
    -- enable ActionBar app icon to behave as action to toggle nav drawer
    getActionBar().setDisplayHomeAsUpEnabled(1)
    getActionBar().setHomeButtonEnabled(1)

    mDrawerToggle = MainActivity.myActionBarDrawerToggle(this, mDrawerLayout, R.drawable.ic_drawer, R.string.drawer_open, R.string.drawer_close)
    mDrawerLayout.setDrawerListener(mDrawerToggle)
    if savedInstanceState == null
      then selectItem(0)

  method onCreateOptionsMenu( menu=Menu )  returns boolean -- @Override nonrx
    inflater = MenuInflater
    inflater = getMenuInflater()
    inflater.inflate(R.menu.main, menu)
    return super.onCreateOptionsMenu(menu)

  method onPrepareOptionsMenu( menu=Menu )  returns boolean -- @Override nonrx
    drawerOpen = boolean
    drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList)
    menu.findItem(R.id.action_websearch).setVisible(\drawerOpen)
    return super.onPrepareOptionsMenu(menu)

  method onOptionsItemSelected( item=MenuItem )  returns boolean  -- **nonrx**  @Override **
    -- The action bar home/up action should open or close the drawer.
    -- ActionBarDrawerToggle will take care of this.
    if mDrawerToggle.onOptionsItemSelected(item)
      then return 1
    select			-- Handle action buttons
      when item.getItemId() = R.id.action_websearch then
        do
          theIntent = Intent Intent(Intent.ACTION_WEB_SEARCH)
          theIntent.putExtra(SearchManager.QUERY, getActionBar().getTitle())
          if theIntent.resolveActivity(getPackageManager()) == null
	    then Toast.makeText(this, R.string.app_not_available, Toast.LENGTH_LONG).show()
	  else startActivity(theIntent)
	  return 1
	end
      otherwise
        return super.onOptionsItemSelected(item)
    end

  method setTitle( title=CharSequence ) -- @Override nonrx
    mTitle = title
    getActionBar().setTitle(mTitle)

    -- the ActionBarDrawerToggle is to be called in onPostCreate() and onConfigurationChanged()...
  method onPostCreate( savedInstanceState=Bundle ) inheritable -- @Override nonrx
    super.onPostCreate(savedInstanceState)
    -- Sync the toggle state after onRestoreInstanceState has occurred.
    mDrawerToggle.syncState()

  method onConfigurationChanged( newConfig=Configuration ) -- @Override nonrx
    super.onConfigurationChanged(newConfig)
    mDrawerToggle.onConfigurationChanged(newConfig) -- required

  method selectItem( position=int ) inheritable
    theFragment = PlanetFragment()
    args = Bundle()
    args.putInt(ARG_PLANET_NUMBER, position)
    theFragment.setArguments(args)
    theFragmentManager = getFragmentManager()
    theFragmentManager.beginTransaction().replace(R.id.content_frame, theFragment).commit()
    mDrawerList.setItemChecked(position, 1)
    setTitle(mPlanetTitles[position])
    mDrawerLayout.closeDrawer(mDrawerList)

/** Minor/Dependent (nested/anonymous) classes **/

class MainActivity.myActionBarDrawerToggle dependent extends ActionBarDrawerToggle
  /*
     To use ActionBarDrawerToggle, create one in your Activity and call through to the following methods corresponding to your Activity callbacks:
     onConfigurationChanged
     onOptionsItemSelected
     Call syncState() from your Activity's onPostCreate to synchronize the indicator with the state of the linked DrawerLayout after onRestoreInstanceState has occurred.
   */
  method myActionBarDrawerToggle(theActivity=Activity, theDrawerLayout=DrawerLayout, theDrawerImageRes=int, theOpenDrawerContentDescRes = int, theCloseDrawerContentDescRes = int)
    super(theActivity, theDrawerLayout, theDrawerImageRes, theOpenDrawerContentDescRes, theCloseDrawerContentDescRes)

  -- method isDrawerIndicatorEnabled returns Boolean

  -- method onConfigurationChanged( newConfig=Configuration )
  --   super.onConfigurationChanged( newConfig )

  method onDrawerClosed( view=View )
    -- inherited DrawerLayout.DrawerListener callback method.
    parent.getActionBar().setTitle(parent.mTitle)
    parent.invalidateOptionsMenu()

  method onDrawerOpened( drawerView=View )
    -- inherited DrawerLayout.DrawerListener callback method.
    parent.getActionBar().setTitle(parent.mDrawerTitle)
    parent.invalidateOptionsMenu()

  -- method onDrawerSlide(drawerView=View, slideOffset=float)
    -- inherited DrawerLayout.DrawerListener callback method.

  -- method onDrawerStateChanged(newState=int)
    -- inherited DrawerLayout.DrawerListener callback method.

  -- method onOptionsItemSelected(MenuItem item) returns boolean
    -- This method should be called by your Activity's onOptionsItemSelected method.

  -- method setDrawerIndicatorEnabled(boolean enable)
    -- Enable or disable the drawer indicator.

  -- method syncState()
    -- Synchronize the state of the drawer indicator/affordance with the linked DrawerLayout.

class MainActivity.DrawerItemClickListener dependent implements AdapterView.OnItemClickListener

    /* **nonrx**  @Override ** */
  method onItemClick( parent=AdapterView, view=View,  position=int,  id=long )
    MainActivity.this.selectItem(position)

/**
 * Fragment that appears in the "content_frame", shows a planet
 */
class MainActivity.PlanetFragment dependent public  extends Fragment

  method PlanetFragment


    /* **nonrx**  @Override ** */
  method onCreateView( inflater=LayoutInflater,  container=ViewGroup,  savedInstanceState=Bundle )  returns View
    rootView = View
    rootView = inflater.inflate(R.layout.fragment_planet, container, 0)
    i = int getArguments().getInt(parent.ARG_PLANET_NUMBER)
    planets = getResources().getStringArray(R.array.planets_array)
    planet = String planets[i]
    imageId = int getResources().getIdentifier(planet.toLowerCase(Locale.getDefault()), "drawable", getActivity().getPackageName())
    iv = ImageView rootView.findViewById(R.id.image)
    iv.setImageResource(imageId)
    getActivity().setTitle(planet)
    return rootView
